<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Dumps the menu into a HTML document</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>macros_menu.examples&gt;end("Examples").end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>
# @title Menus: dumping the menu structure
#
# This application dumps the menu structure into a HTML browser window. Beyond acting as an example,
# this script is quite useful to visualize the menu structure and to determine insert points when 
# installing new items.

module Examples
 
  #  Dumps an item and it's children recursively
  def self.dump_children(space, menu, item)
    s = ""
    s += "&lt;tr&gt;&lt;td&gt;&lt;tt&gt;#{space}#{item}&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;#{menu.action(item).title}&lt;/td&gt;&lt;td&gt;#{menu.action(item).shortcut}&lt;/td&gt;&lt;/tr&gt;\n"
    menu.items(item).each { |child| s += dump_children("&amp;nbsp;&amp;nbsp;#{space}", menu, child) }
    return s
  end
  
  #  Gets the menu object
  app = RBA::Application.instance
  mw = app.main_window
  menu = mw.menu
  
  #  Creates the HTML page
  s = "&lt;h1&gt;Menu item structure&lt;/h1&gt;\n"
  s += "&lt;table&gt;\n"
  s += "&lt;tr&gt;&lt;td&gt;&lt;b&gt;Path&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Title&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Shortcut&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;\n"
  menu.items("").each { |item| s += dump_children("", menu, item) }
  s += "&lt;/table&gt;\n"
  
  #  And shows this base in the HTML browser dialog
  text = RBA::BrowserSource::new_html( s )
  browser = RBA::BrowserDialog::new
  browser.set_source( text )
  browser.set_home( "int:" )
  browser.exec

end
</text>
</klayout-macro>
