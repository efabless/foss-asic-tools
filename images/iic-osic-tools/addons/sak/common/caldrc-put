#!/bin/bash
#@ usage: caldrc-put [-y] [-N] [-l <logfile>] [-C <CalDRCrepoDir>] [-c <topcell>] <gdsFilePath>
#@   <gdsFilePath>  : required. The basename, minus one dot-suffix, determines default topcell,
#@       after having stripped a .gz or .xz suffix.
#@       The GDS is NOT tested to verify that same-named topcell exists. Examples:
#@                  a/b/joe         -> cell=joe      -> torture_tests/joe/joe.gds
#@                  a/b/joe.xz      -> cell=joe      -> torture_tests/joe/joe.gds.xz
#@                  a/b/joe.123     -> cell=joe      -> torture_tests/joe/joe.gds
#@                  a/b/joe.123.gz  -> cell=joe      -> torture_tests/joe/joe.gds.gz
#@                  a/b/joe.123.gds -> cell=joe.123  -> torture_tests/joe.123/joe.123.gds
#@               a/b/joe.123.gds.gz -> cell=joe.123  -> torture_tests/joe.123/joe.123.gds.gz
#@               a/b/joe.123.gds.xz -> cell=joe.123  -> torture_tests/joe.123/joe.123.gds.xz
#@   -c <topcell> : optionally name the topcell. Default is to determine it from the
#@       <gdsFilePath> path only (not its data contents) as above.
#@                  a/b/joe.123.gds -> cell=joe.123  -> torture_tests/joe.123/joe.123.gds
#@         -c chip1 a/b/joe.123.gds -> cell=chip1    -> torture_tests/chip1/chip1.gds
#@         -c chip1 a/b/joe.123.gds.xz -> cell=chip1    -> torture_tests/chip1/chip1.gds.xz
#@   -C <calDRCrepoDir> : dir of local clone br=master, https://foss-eda-tools.googlesource.com/openflow-drc-tests
#@       Else set by env-var CDRCREPO, if no -C option given.
#@       Else "." default: If neither env-var nor -C option given, "." (CWD) is tested for same.
#@       It is a fatal error if this local repo-dir cannot be found & confirmed.
#@       Branch=master will be checked-out, pulled, and have the GDS add/commit/pushed to it.
#@   -l <logfile> : optional path to a log-file to write one line to on commit success.
#@       Else set by env-var CDRCLOG, if no -l option given. Else no log is written.
#@   -y  : Do not prompt. Default when STDIN is a terminal is to prompt before main git ops.
#@   -N  : Do NOT push. The commit is done, and commitID still is logged.
#@ 
#@   On optional COMPRESSION: A .gz or .xz suffix will be stripped, before stripping one
#@   more suffix to isolate a default topcell name from source file (unless given explicitly by
#@   the -c option). An original .gz or .xz will be reapplied to the filename when git-add-ed to the repo.
#@   In all cases FILE DATA IS COPIED AS-IS, there is NO uncompress nor auto compress in this script.
#@   If there's a mismatch between what the extension indicates (compressed or not, and type: gz/xz),
#@   and actual file data contents there will be failures: run_calibre.sh recognizes when to
#@   uncompress by the extension.
#@
#@   Below the openflow-drc-tests dir the following will happen. Most steps exit on error.
#@      <prompt to continue>
#@      git checkout master
#@      git pull
#@ 
#@      mkdir -p            torture_tests/<topcell>/
#@      cmp   <gdsFilePath> torture_tests/<topcell>/<topcell>.gds (IIF EXISTS & IDENTICAL: exit with error)
#@      cp -f <gdsFilePath> torture_tests/<topcell>/<topcell>.gds
#@      determine <md5> of  torture_tests/<topcell>/<topcell>.gds
#@ 
#@      <prompt to continue>
#@      git add             torture_tests/<topcell>/<topcell>.gds
#@      git commit -m "<topcell>.gds md5=<md5>"
#@      if not no-push:
#@        git push
#@      extract short <commitid> of commit
#@      extract short <timestamp> of commit
#@ 
#@      if env-var exists CDRCLOG:
#@         append line to the log: "caldrc-put: <topcell>.gds <commitid> <timestamp> md5=<md5> <gdsFilePath>"
#@ 
#@   examples:
#@   All on command-line, with log, prompting:
#@     caldrc-put -C ~/git/openflow-drc-tests -l ~/caldrc.log ~/my_sram.gds
#@   ... no log:
#@     caldrc-put -C ~/git/openflow-drc-tests  ~/my_sram.gds
#@   ... with log, no prompts:
#@     caldrc-put -y -C ~/git/openflow-drc-tests -l ~/caldrc.log ~/my_sram.gds
#@   Use env-vars, with log, no prompts:
#@     export CDRCREPO=~/git/openflow-drc-tests CDRCLOG=~/caldrc.log
#@     caldrc-put -y ~/my_sram.gds
#@   ... name the topcell explicitly (don't infer from gds filename):
#@     export CDRCREPO=~/git/openflow-drc-tests CDRCLOG=~/caldrc.log
#@     caldrc-put -y -c my_sram ~/data.gds
#@

PROG=caldrc-put
PROGF=$0
errs=0
caldrc=$CDRCREPO    # opt. env-var, override by -C cmd-line option
log=$CDRCLOG        # opt. env-var, override by -l cmd-line option
putbr=master
putdir=torture_tests

# is STDIN a terminal? If not: no prompting for anything
inter=""
[[ -t 0 ]] && inter=1

dopush=1

usage() {
    sed -n -e '/^#@/s/^#@//p' <$PROGF
    exit $errs
}

err () {
    (( errs++ ))
    echo "${PROG}: ERROR, $*" >&2
}
msg () {
    echo "${PROG}: $*"
}
vrb () {
    [ -n "$verbose" ] && echo "${PROG}: $*" >&2
}
die0 () {
    exit $errs
}
die () {
    err "$*"
    exit $errs
}
dieu0 () {
    usage "${PROG}: ERROR, $*"
}

# gitcd function: echo and eval a (git) command, DIE if it fails (and write msg to stderr).
#   $1 is var to be assigned the STDOUT of the command.
# Use this only when must pass.
gitcd () {
  local _val="" _outvar=$1 _stat=0
  shift
  echo "$*"
  [[ -z "$dryrun" ]] && {
      _val=$("$@") || die "failed($?) in: $*"
      _stat=$?
  }
  eval "$_outvar=\${_val}"
  return $_stat
}
# gitc function: echo and eval a (git) command.
#   $1 is var to be assigned the STDOUT of the command.
# Status of the command is propagated.
gitc () {
  local _val="" _outvar=$1 _stat=0
  shift
  echo "$*"
  [[ -z "$dryrun" ]] && {
      _val=$("$@")
      _stat=$?
  }
  eval "$_outvar=\${_val}"
  return $_stat
}

# main start

while getopts "c:C:l:Ny" o; do
    : echo got "optchar $o, with optarg $OPTARG"
    case "$o" in \?)
		     (( errs++ ))
		     continue ; esac
    case "$o" in y)
		     inter=""
		     continue ; esac
    case "$o" in N)
		     dopush=""
		     continue ; esac
    case "$o" in l)
		     log=$(readlink -m "$OPTARG")    # we chdir below; ensure absolute path
		     continue ; esac
    case "$o" in c)
		     topc="$OPTARG"
		     continue ; esac
    case "$o" in C)
		     caldrc=$(readlink -m "$OPTARG") # we chdir below; ensure absolute path
		     continue ; esac
done

[[ $errs != 0 ]] && {
    usage
}

(( OPTIND-- ))
shift $OPTIND

[[ -z "$1" ]] && {
    die "missing required gdsFilePath argument"
}
gds="$1"
shift
[[ ! -r "$gds" ]] && {
    die "gdsFile not readable, $gds"
}
gds=$(readlink -m "$gds")      # we chdir below; ensure absolute path

# if no topcell option, determine from $gds file.
# But regardless if explicit topcell specified, capture optional compress-suffix from gds file.
compsuf=""
topc1=$(basename "$gds")   # strip dirs
topc2=${topc1%.xz}         # strip compression extensions
topc3=${topc2%.gz}
[[ -z "$topc" ]] && {
    topc=${topc3%.*}           # strip just one(last) dot-extension (i.e. normally .gds)
}
if   [[ "$topc2" != "$topc1" ]]; then
    compsuf=.xz
elif [[ "$topc3" != "$topc2" ]]; then
    compsuf=.gz
fi
  
[[ -z "$caldrc" ]] && {
    caldrc=$(pwd)
}
caldrc=$(readlink -m "$caldrc")  # ensure absolute path
msg "topcell: '$topc'"

[[ -n "$log" ]] && {
    log=$(readlink -m "$log")
    [[ ! -e "$log" ]] && (touch "$log" || die "failed to create log, $log")
    [[ ! -w "$log" ]] &&                  die "log not writable, $log"
    msg "log: '$log'"
}

cd "$caldrc" || die "failed: cd $caldrc"

# get original branch. ALSO doubles as hard-stop if this dir is NOT within a git-repo.
# Although gitcd exits on error (such as not a repo), the detached-HEAD is not an error.
gitcd   br git branch --show-current
[[ -z "$br" ]] && die "no current branch (perhaps: detached HEAD)"
msg "original branch '$br'"

# Path may not be root of the repo, goto it.
gitcd caldrcr git rev-parse --show-toplevel
msg "normalized caldrcrepo: '$caldrcr'"
cd  "$caldrcr" || die "failed: cd $caldrcr"

# checkout put-branch and pull (or just pull if already on that branch)
if [[ "$br" != "$putbr" ]]; then
    echo
    printf  "NEXT: git checkout $putbr --\n    : git pull\n"
    [[ -n "$inter" ]] && read -p "Enter to CONTINUE (^C to quit)> "
    gitcd    res git checkout $putbr --
      echo "$res"
    gitcd    res git pull
      echo "$res"
else
    echo
    printf  "NEXT: git pull\n"
    [[ -n "$inter" ]] && read -p "Enter to CONTINUE (^C to quit)> "
    gitcd    res git pull
      echo "$res"
fi

mkdir -p "$putdir/$topc" || die "failed: mkdir -p $putdir/$topc"
trg="$putdir/$topc/$topc.gds${compsuf}"
[[ -e $trg ]] && {
    cmp -s "$gds" "$trg" && die "file is unchanged: $gds, $trg"
}

# copy
echo "cp -f $gds $trg"
cp -f "$gds" "$trg"      || die "failed: cp -f $gds $trg"

# md5 of gds
line=($(md5sum "$gds"))  || die "failed: md5sum $gds"
md5=${line[0]}
msg "got md5: $md5"
message="$topc.gds md5=$md5"

if [[ -n "$dopush" ]]; then
    logpush="git push"
else
    logpush="[no-git-push]"
fi

echo
printf  "NEXT: git add $trg\n    : git commit -m '$message'\n    : $logpush\n"
[[ -n "$inter" ]] && read -p "Enter to CONTINUE (^C to quit)> "

# git add
gitcd    res git add $trg
  echo "$res"

# git commit
gitcd    res git commit -m "$message"
  echo "$res"

if [[ -n "$dopush" ]]; then
    gitcd    res git push
    echo "$res"
    logpush=""
else
    msg "SKIPPED 'git push' (still logging commit). Remember: 'git push' manually."
    logpush=" [no-git-push]"
fi

# info about the commit
gitcd  commit git rev-parse HEAD
  echo "commitId is $commit"
TZ=UTC gitcd  stamp git log -n 1 --pretty=format:%cd --date=format-local:%Y-%m-%d.%T.%Z HEAD
  echo "timestamp is $stamp"

message="caldrc-put: $topc.gds $commit $stamp md5=$md5 ${gds}${logpush}"
[[ -n "$log" ]] && {
    echo "logging: '$message'"
    echo "$message" >> $log || die "failed append to log, $log"
}
  
echo done
exit $errs
