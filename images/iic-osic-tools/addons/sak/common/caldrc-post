#!/bin/bash
#@ usage: caldrc-post [-y] [-a] [-l <logfile>] [-S <CalSumPath>] [-C <CalDRCrepoDir>]
#@           [-R <outputDataDir>] [-b <branch>] [-w <waiverFile>] [[-L] [<putCommitId>]] [<topcell>]
#@        caldrc-post -h   : show usage only
#@   Run calibreSummary.py on one calibre-output directory.
#@   -w <waiverFile> : optional path to a file of waivers to pass to calibreSummary.py.
#@      Set by env-var CDRCWAIVE, if no -w option given. Else no waiver file used.
#@   -b <branch>    : optional, force processing of this branch (of form output*, not latest-*)
#@        TODO: using -b latest-* form does NOT WORK yet; does not enumerate cells beneath.
#@      If branch (-b) not specified one (or group) are selected of form outputNNN_* using:
#@        <putCommitId>  : optional, the commitId used to push the source GDS to master branch.
#@          CommitId can be long, or short so long as uniquely identifies one commit.
#@        <topcell>      : optional, the topcell-name latest results to find and post-process.
#@          If only <topcell> the latest results for that <topcell> will be used.
#@      Neither: latest is used. See details below on how branch-name is selected.
#@      For a commitId match, IFF no topcell specified: ALL matching branches are processed.
#@      (TODO: -a: process all recent branches (TBD what this means, depending on how/where results stored)).
#@   -S <CalSumPath> : path to executable calibreSummary.py script. No need if 'calibreSummary.py' is found in $PATH.
#@      Set by env-var CDRCSUMMARY, if no -S option given. Else it must be found in $PATH.
#@   -C <calDRCrepoDir> : dir of local clone, https://foss-eda-tools.googlesource.com/openflow-drc-tests
#@      Set by env-var CDRCREPO, if no -C option given.
#@      "." default: If neither env-var nor -C option given, "." (CWD) is tested for same.
#@      It is a fatal error if this local repo-dir cannot be found & confirmed.
#@   -R <ResultDataDir> : dir in which to write .csv's from caldrc-put results.
#@      Set by env-var CDRCPOST, if no -R option given.
#@   -l <logfile> : optional path to a log-file to write one line to on success.
#@      Else set by env-var CDRCLOG, if no -l option given. Else no log is written.
#@   -L  : Find & parse the "last" ^caldrc-put: commit-id & topcell from specified log.
#@      Either or both of log's commid-id/topcell will be applied/used in place of missing
#@      cmd-line's commidId or topcell. If cmd-line gave both already -L is ignored.
#@      This is too simple: Best to use -L without explicitly giving any commit or topcell.
#@      TODO: if cmd-line names topcell, get log's last *-put line match of same cell: & use its commit.
#@   -a  : also copy (with rsync) the calibre results dirs & contents (drc/*, latchup/*, ...) into
#@      <ResultDataDir>/<topcell>/...
#@   -y  : Do not prompt. Default when STDIN is a terminal is to prompt before main git ops.
#@ 
#@   TODO: correct below pseudo-code, esp for multi-cell case in same outputNNN_* branch group:
#@   Below the openflow-drc-tests dir the following will happen. Most steps exit on error.
#@      git fetch
#@      determine a <branch> to process.
#@         If have -b: use that branch.
#@ 	If have <putCommitId> & <topcell> find branch matching pattern:
#@            b=output<NNN>_*drc*-g<putCommitId>_<topcell>
#@         If have only <putCommitId>, extract <topcell> from branch matching pattern:
#@            b=output<NNN>_*drc*-g<putCommitId>_*
#@         If have only <topcell>, select branch by highest <NNN> matching matching pattern:
#@            b= output<NNN>_*drc*-g*_<topcell>
#@ 	   and extract <putCommitId> from branch name.
#@         Else (none of above) select highest <NNN> of output<NNN>_* and extract putCommitId & topcell.
#@         (TODO: If -A: Process all not-yet-processed branches).
#@ 
#@      <prompt to continue>
#@      git checkout <branch>
#@      git pull
#@      determine <brCommitId> from <branch>
#@      determine <md5> of torture_tests/<topcell>/<topcell>.gds
#@ 
#@      post-process       torture_tests/<topcell>/*/*.results :
#@         TBD... Run calibreSummary.py on each of torture_tests/<topcell>/*/<topcell>.drc.results
#@         Writing to dir-structures within <ResultRepoDir>
#@ 
#@      if env-var exists CALDRCLOG:
#@         append line to the log: "caldrc-post: <topcell>.gds put=<putCommitid> <timestamp> md5=<md5> <branch-name>"
#@ 
#@ examples:
#@ Process single named output* branch, specify all other parameters via env-vars, use prompts:
#@   export CDRCREPO=~/git/openflow-drc-tests CDRCLOG=~/x.log CDRCWAIVE=~/waivers CDRCPOST=~/calsumout
#@   export CDRCSUMMARY=~/git/sak2/calibreSummary.py
#@   caldrc-post -b output254_pdk78-ge85b3090d_drc176-g5f2d7b3_caravel
#@ ... no prompting:
#@   caldrc-post -y -b output254_pdk78-ge85b3090d_drc176-g5f2d7b3_caravel
#@ Specify all parameters on cmd-line, use prompts, process all topcells of commit
#@   caldrc-post -C ~/git/openflow-drc-tests -l ~/x.log -w ~/waivers -S ~/git/sak2/calibreSummary.py -R ~/calsumout 
#@ Use env-vars, process all output* branches (multiple topcells) of given commit:
#@   caldrc-post 5f2d7b3
#@     -> branches: output254_pdk78-ge85b3090d_drc176-g5f2d7b3_sram_1rw1r_32_256_8_sky130
#@                  output254_pdk78-ge85b3090d_drc176-g5f2d7b3_fpga_core
#@                  output254_pdk78-ge85b3090d_drc176-g5f2d7b3_chip_io
#@                  output254_pdk78-ge85b3090d_drc176-g5f2d7b3_caravel
#@ ... use full commitid:
#@   caldrc-post 5f2d7b35eb2c5ba4c7eb3486d2f6739ccc590e5e
#@ ... use short commitid, process only one topcell:
#@   caldrc-post 5f2d7b3 chip_io
#@ ... process latest outputNNN_* branch GROUP (branch(es) embedding same commitid, corresponding to one or more topcells):
#@   caldrc-post
#@

PROG=caldrc-post
PROGF=$0
errs=0
caldrc=$CDRCREPO    # opt. env-var, override by -C cmd-line option
outdir=$CDRCPOST    # opt. env-var, override by -R cmd-line option
sumbin=$CDRCSUMMARY # opt. env-var, override by -S cmd-line option
waive=$CDRCWAIVE    # opt. env-var, override by -w cmd-line option
log=$CDRCLOG        # opt. env-var, override by -l cmd-line option
putdir=torture_tests

# is STDIN a terminal? If not: no prompting for anything
inter=""
[[ -t 0 ]] && inter=1

usage() {
    sed -n -e '/^#@/s/^#@//p' <$PROGF
    exit $errs
}

err () {
    (( errs++ ))
    echo "${PROG}: ERROR, $*" >&2
}
msg () {
    echo "${PROG}: $*"
}
vrb () {
    [ -n "$verbose" ] && echo "${PROG}: $*" >&2
}
die0 () {
    exit $errs
}
die () {
    err "$*"
    exit $errs
}
dieu0 () {
    usage "${PROG}: ERROR, $*"
}

# gitcd function: echo and eval a (git) command, DIE if it fails (and write msg to stderr).
#   $1 is var to be assigned the STDOUT of the command.
# Use this only when must pass.
gitcd () {
  local _val="" _outvar=$1 _stat=0
  shift
  echo "$*"
  [[ -z "$dryrun" ]] && {
      _val=$("$@") || die "failed($?) in: $*"
      _stat=$?
  }
  eval "$_outvar=\${_val}"
  return $_stat
}
# gitc function: echo and eval a (git) command.
#   $1 is var to be assigned the STDOUT of the command.
# Status of the command is propagated.
gitc () {
  local _val="" _outvar=$1 _stat=0
  shift
  echo "$*"
  [[ -z "$dryrun" ]] && {
      _val=$("$@")
      _stat=$?
  }
  eval "$_outvar=\${_val}"
  return $_stat
}

# main start

branch=()
while getopts "ab:C:FhLl:R:S:w:y" o; do
    : echo got "optchar $o, with optarg $OPTARG"
    case "$o" in \?)
		     (( errs++ ))
		     continue ; esac
    case "$o" in y)
		     inter=""
		     continue ; esac
    case "$o" in a)
		     allres=1
		     continue ; esac
    case "$o" in L)
		     loglast=1
		     continue ; esac
    case "$o" in F)
		     force=1
		     continue ; esac
    case "$o" in h)
		     usage   # does not return
		     continue ; esac
    case "$o" in l)
		     log=$(readlink -m "$OPTARG")    # we chdir below; ensure absolute path
		     continue ; esac
    case "$o" in w)
		     waive=$(readlink -m "$OPTARG")    # we chdir below; ensure absolute path
		     continue ; esac
    case "$o" in b)
		     branch=("$OPTARG")
		     continue ; esac
    case "$o" in C)
		     caldrc=$(readlink -m "$OPTARG") # we chdir below; ensure absolute path
		     continue ; esac
    case "$o" in S)
		     sumbin=$(readlink -m "$OPTARG") # we chdir below; ensure absolute path
		     continue ; esac
    case "$o" in R)
		     outdir=$(readlink -m "$OPTARG") # we chdir below; ensure absolute path
		     continue ; esac
done

[[ $errs != 0 ]] && {
    usage
}

(( OPTIND-- ))
shift $OPTIND

arg1=
arg2=
[[ -n  "$1" ]] && {
  arg1="$1"
  shift
}
[[ -n  "$1" ]] && {
  arg2="$1"
  shift
}
[[ -n  "$1" ]] && {
    die "extra args not supported: $*"
}

[[ -z "$caldrc" ]] && {
    caldrc=$(pwd)
}
caldrc=$(readlink -m "$caldrc")  # ensure absolute path

[[ -n "$log" ]] && {
    log=$(readlink -m "$log")
    [[ ! -e "$log" ]] && (touch "$log" || die "failed to create log, $log")
    [[ ! -w "$log" ]] &&                  die "log not writable, $log"
    msg "log: '$log'"
}
[[ -n "$waive" ]] &&  {
    waive=$(readlink -m "$waive")
    [[ ! -r "$waive" ]] && die "waiver-file not readable, '$waive'"
}

[[ ! -s "$log" && -n "$loglast" ]] && die "no data to support -L option, log is empty, $log"

# if not given by env-var or cmd-line default to calibreSummary.py (i.e. in PATH)
[[ -z "$sumbin" ]] && {
    sumbin=calibreSummary.py
}
# verify executable calibreSummary.py (in PATH if necessary); make an absolute path to it.
sumbin=$(which $sumbin 2>/dev/null) || die "can't find executable calibreSummary.py"
sumbin=$(readlink -m $sumbin)   # expands tilde
msg "calibreSummary.py: '$sumbin'"

[[ -z "$outdir" ]] && {
    die "no <outputDataDir> determined"
}
outdir=$(readlink -m $outdir)   # make absolute
msg "outputDataDir: '$outdir'"
msg "waiverFile: '$waive'"

cd "$caldrc" || die "failed: cd $caldrc"

# get original branch. ALSO doubles as hard-stop if this dir is NOT within a git-repo.
# Although gitcd exits on error (such as not a repo), the detached-HEAD is not an error.
gitcd   br git branch --show-current
[[ -z "$br" ]] && die "no current branch (perhaps: detached HEAD)"
msg "original branch '$br'"

# Path may not be root of the repo, goto it.
gitcd caldrcr git rev-parse --show-toplevel
msg "normalized caldrcrepo: '$caldrcr'"
cd  "$caldrcr" || die "failed: cd $caldrcr"

echo
printf  "NEXT: git fetch origin\n"
dofetch=
[[ -n "$inter" ]] && read -p "Enter to CONTINUE, 'n' for NO FETCH (^C to quit)> " dofetch
if [[ "$dofetch" != "" && "$dofetch" != "n" ]]; then
    echo "unsupported reply, '$dofetch', aborting..."
    exit 1
fi

if [[ "$dofetch" != "n" ]]; then
    gitcd    res   git fetch origin
      echo "$res"
else
    echo "SKIPPED: git fetch origin, WARNING: possibly using non-latest data..."
fi

[[ -n "$arg2" && -n "$loglast" ]] && {
    msg "WARNING, ignoring -L, since cmd-line specifies explicit commitId & topcell"
    loglast=""
}
[[ -n "$branch" && -n "$loglast" ]] && {
    msg "WARNING, ignoring -L, since cmd-line specified explicit branch to process"
    loglast=""
}

# determine if arg1,2 refer to existing commits and make 7-char short form
#   git rev-parse --short=7 -q "5f2d7b35eb2c5ba4c7eb3486d2f6739ccc590e5e^{commit}" -> 5f2d7b3
sarg1=
sarg2=
[[ -n "$arg1" ]] && {
    gitc sarg1 git rev-parse --short=7 -q "${arg1}^{commit}"
    [[ $? != 0 ]] && sarg1=""
}
[[ -n "$arg2" ]] && {
    gitc sarg2 git rev-parse --short=7 -q "${arg2}^{commit}"
    [[ $? != 0 ]] && sarg2=""
}
# error: if have arg2, but neither were a branch.
# error: if have arg2, but both were a branch.
[[ -n "$arg2" && -z "$sarg1" && -z "$sarg2" ]] && die "neither arguments '$arg1' '$arg2' were valid commitIds"
[[ -n "$arg2" && -n "$sarg1" && -n "$sarg2" ]] && die "both arguments '$arg1' '$arg2' are commitIds"

# use canonical 7-char short form of commits args from here onwards
[[ -n "$sarg1" ]] && {
    msg "canonical arg1: '$sarg1'"
    arg1=$sarg1
}
[[ -n "$sarg2" ]] && {
    msg "canonical arg2: '$sarg2'"
    arg2=$sarg2
}

# for -L option, examine existing log's last put entry for a <topcell>
# example: caldrc-put: the_sram.gds 290a7e324d857a9fef7793ccf07d7f0fafe5419f ...
logline=
[[ -n "$loglast" ]] && {
    logline=$(awk '/^caldrc-put:/{ line=$2 " " $3 } END { print line }' $log)
    [[ -z "$logline" ]] && die "cannot use -L, didn't find any '^caldrc-put:' line in log, $log"
}
[[ -n "$logline" ]] && {
    lgds=${logline%% *}   # get first word, blank delimited
    lcid=${logline##* }   # get 2nd/last word, blank delimited
    ltopc=${lgds%.gds}    # strip .gds suffix
    [[ -z "$lgds" || -z "$lcid" || -z "$ltopc" ]] && die "internal-error, failed to parse log's last '^caldrc-put:' fields, line={$logline}"
    # msg "for -L recovered: gds='$lgds', topc=$ltopc, cid='$lcid'"
    # get canonical 7-char form of log's commit
    gitcd lsid git rev-parse --short=7 -q "${lcid}^{commit}"

    # At present we know we do not have both arg1,arg2 (-L ignored in that case).
    # We may or may not have an arg1. If not, apply log-entries to arg1,2.
    # If we do have arg1, is it a commitId?: Yes: apply log-topcell to arg2. No: apply log-cid to arg2.
    if [[ -z "$arg1" ]]; then
	sarg1="$lsid"
	arg1="$lsid"
	arg2="$ltopc"
    elif [[ -n "$sarg1" ]]; then
	arg2="$ltopc"
    else
	sarg2="$lsid"
	arg2="$lsid"
    fi
    msg "due -L, from log's last -put entry reconstructed arg1,2 as: '$arg1' '$arg2'"
}

# determine branch to use.
[[ -z "$branch" ]] && {
    # get all remote branches of pattern: origin/output\*_\*-g\*_drc\*-g\*_\*
    brfile=$(mktemp)
    set -o pipefail
      echo "git branch -r -l 'origin/output*_*-g*_drc*-g*_*' | awk '{\$1=\$1};1' | LC_COLLATE=C sort -nr >$brfile"
      git branch -r -l "origin/output*_*-g*_drc*-g*_*" | awk '{$1=$1};1' | LC_COLLATE=C sort -nr >$brfile
      stat=$?
    set +o pipefail
    [[ "$stat" != 0 ]] && die "failed($?) in: git branch -r -l 'origin/output*_*-g*_drc*-g*_*' | awk '{$1=$1};1' | LC_COLLATE=C sort -nr >$brfile"
    # mapfile -t brary $brfile
    # echo see branches in $brfile ...
    [[ ! -s "$brfile" ]] && die "no remote branch pattern matches"

    # read (one) latest output* branch
    read brlast <"$brfile"
    # get commitId from brlast
    topc=${brlast##*-g}            # strip prefix to start of (2nd) commitId
    commitlast=${topc%%_*}         # strip suffix from _ to isolate commitId
    topc=${topc#*_}            # strip prefix thru (1st) underscore: start of topc
    # gitc scommit git rev-parse --short=7 -q "${commitlast}^{commit}"
    # [[ $? != 0 ]] && scommit=""

    # apply commitlast (in place of arg1) if had no explicit arg1,2, so we default we process all cells of latest output* branch:
    [[ -n "$commitlast" && -z "$arg1" ]] && {
	arg1="$commitlast"
	msg "by default, inferred commitid: $commitlast, to do all topcells of last branch: $brlast"
    }

    # setup zero (neither arg1 nor arg2) or two patterns to look for.
    # When only arg1: interpret it as both commitId and topcell.
    # When both arg1,arg2: interpret as both commitId,topcell and topcell,commitId.
    p1=
    p2=
    # example: origin/output257_pdk78-ge85b3090d_drc179-g5566566_sram_1rw1r_32_256_8_sky130    
    if [[ -n "$arg1" && -n "$arg2" ]]; then
	p1="output*_*-g*_drc*-g${arg1}_${arg2}"
	p2="output*_*-g*_drc*-g${arg2}_${arg1}" # reversed
    elif [[ -n "$arg1" ]]; then
	p1="output*_*-g*_drc*-g${arg1}_*"  # arg1 as commitId
	p2="output*_*-g*_drc*-g*_${arg1}"  # arg1 as topcell
    fi
    last=
    match1=()
    match2=
    while read line; do   # input on the done: <"$brfile"
	line=${line#origin/}  # strip 'origin/' prefix

	[[ -z "$last" ]] && last="$line"

	# no patterns: we're done, last branch is it.
	[[ -z "$p1" ]] && {
	    match1=("$last")
	    break
	}

	# find latest match of p1 or p2; as soon as found both: quit loop.
	[[ "$line" == $p1 ]] && {
	    match1+=("$line")
	}
	[[ -z "$match2" && "$line" == $p2 ]] && {
	    match2="$line"
	}
	[[ -n "$match1" && -n "$match2" ]] && {
	    break
	}
    done <"$brfile"
    rm -f "$brfile"

    # no last branch: an error
    [[ -z "$last" ]] && die "internal-error, no latest branch found"
    msg "unconstained latest output branch: $last"
    
    # ambiguity: if have both match1,2
    if [[ -n "$match1" && -n "$match2" ]]; then
	die "internal-error, branch-match is ambiguous between: '$match1' '$match2'"
    elif [[ -n "$match1" ]]; then
	branch=("${match1[@]}")
    elif [[ -n "$match2" ]]; then
	branch=("$match2")
    elif [[ -n "$arg1" ]]; then
	# no matches, though we had at least arg1 (and optionally arg2): ERROR.
	die "no branch-match found for given args"
    else
	# Shouldn't be possible to get here. 
	die "internal-error, shouldn't get here"
    fi

    [[ -z "$branch" ]] && die "internal-error, no branch match(es) found"

    msg "selected output branch(es): ${branch[*]}"
}

mkdir -p "$outdir" || die "failed: mkdir -p $outdir"

# loop over the 1 or more branches found
for br in "${branch[@]}"; do
    # checkout branch and pull (or just pull if already on that branch)
    printf  "NEXT: git checkout $br --\n    : git pull\n"
    [[ -n "$inter" ]] && read -p "Enter to CONTINUE (^C to quit)> "
    gitcd    res git checkout $br --
    echo "$res"
    gitcd    res git pull
    echo "$res"

    # get topcell from branch
    topc=${br##*-g}            # strip prefix to start of (2nd) commitId
    commit=${topc%%_*}         # strip suffix from _ to isolate commitId
    topc=${topc#*_}            # strip prefix thru (1st) underscore: start of topc

    msg "for branch=$br got commit=$commit, topcell=$topc ..."
    trg=$putdir/$topc

    # md5 of gds
    gds="$putdir/$topc/$topc.gds"
    if [[ -r "$gds" ]]; then
	line=($(md5sum "$gds"))  || die "failed: md5sum $gds"
	md5=${line[0]}
    else
	md5="(no-gds-file)"
    fi
    msg "got md5: $md5"

    # info about the drc-results commit
    TZ=UTC gitcd  stamp git log -n 1 --pretty=format:%cd --date=format-local:%Y-%m-%d.%T.%Z HEAD
    echo "timestamp is $stamp"

    # construct calibreSummary cmd-line
    # usage: calibreSummary.py [-h] --targetPath TARGETPATH
    #                         [--waivableList WAIVABLELIST]
    #                         [--outputDirectory OUTPUTDIRECTORY]
    cmd=($sumbin --outputDirectory "$outdir" --targetPath "$trg")
    [[ -n "$waive" ]] && {
	cmd+=("--waivableList" $waive)
    }
    msg "running: ${cmd[*]}"
    ${cmd[@]}
    stat=$?
    [[ $stat != 0 ]] && die "failed($stat) in ${cmd[*]}"

    # -a: copy all result SUBDIRS into/below outdir; but BELOW a <topcell>/ subdir
    [[ -n "$allres" ]] && {
	msg "running: rsync -a --exclude='*.gds' --exclude='*.gds.gz' $trg/ $outdir/$topc/"
	rsync -a --exclude='*.gds' "$trg"/ "$outdir/$topc/"
	stat=$?
	[[ $stat != 0 ]] && die "failed($stat) in rsync"
    }

    message="caldrc-post: $topc.gds put=$commit $stamp md5=$md5 $br"
    [[ -n "$log" ]] && {
	echo "logging: '$message'"
	echo "$message" >> $log || die "failed append to log, $log"
    }


done

  
echo done
exit $errs
