#!/bin/bash
# usage: gdsMergeall.drc [-f] [-t <threads>] [-T <tileSize> ] <gdsFileIn> <gdsFileOut>
#
# For each layer: merge shapes. To eliminate/drop zero-area boundarys (fatal to some tools).
# Usually input & output file-size are close, perhaps output a little smaller.
# 
# WARNING: output has ALL TEXT STRIPPED/REMOVED (i.e. text not propagated from in to out).
# WARNING: paths are converted to polygons.
# 
# Intent is (default) deep-mode retains hier. as much as possible, just
# merging each layer of each cell "in-place".
#
# Exit status (does not work in klayout 0.23.11; does in 0.24 and later):
#  1 : I/O error or other internal error (uncaught exceptions).
#  2...127 : means 1... rules did flag error(s). If over 126 rules had errors, status is 127 max.
#      That is this # is the how many rule-types had non-zero errors, NOT total errors count.
#  0 : no rules flagged errors.
#   If process dies thru signal, exit status is 128+SIGNUM, so that range is reserved.
#   i.e. if kernel oom-killer sends kill -9: status=137.
#
# Runs klayout (in batch).
# (klayout requirement is this script-name *must* end in .drc).
#
# Shebang for: no outer ruby interpreter; generalize arg passing to script.
# for-bash: re-quote args, to import from an env-var
x=%{
  [[ "$1" == "--version" || "$1" == "-v" ]] && exec klayout -b -v    # pass-thru -v

  export _M0=
  for i in "$@" ; do _M0="$_M0${_M0:+,}\"${i//\"/\\\"}\""; done
  exec klayout -b -r "$0" -rd tag="$_M0"
  # tag= is NOT USED, cosmetic: So process-listing shows the arguments, and a
  # user can distinguish one process from another, despite running same klayout-script.
}
# for-ruby:

argv=eval("[ #{ENV["_M0"]} ]")   # re-parse args from env-var
# puts "argv.size=#{argv.size}"
# argv.each{ |v| puts v }

  thisScript = $0
  prog="gdsMergeall.drc"
  usage = "Usage: #{prog} [options]  <gdsFileIn> <gdsFileOut>"
  usage += "\n   WARNING: output has ALL TEXT STRIPPED/REMOVED (i.e. text not propagated from in to out)."
  usage += "\n   WARNING: output has paths converted to polygons."
  require 'optparse'

  argSum = argv.join(' ')
  if argv.empty?
    argv << '--help'
  end

  o = {:flat=>false, :thread=>4, :tile=>0}
  OptionParser.new do |opts|
    opts.banner = usage
    opts.on("-f", "flat mode, default is deep (in absence of tiling). Not recommended.") do
      o[:flat] = true
    end
    opts.on("-T TILE_SIZE", "enable tiling (disables deep) AND sets tile-size in um; default 0 (no tiling). Not recommended.") do |tile|
      o[:flat] = true
      o[:tile] = tile.to_f
    end
    opts.on("-t THREADS", "threads for deep or tiled (not flat), default 4. Give 0 to get from cmd: nproc") do |thr|
      o[:thread] = thr.to_i
    end

    opts.on("-v", "--version", "version: pass-thru, JUST show klayout version") do
      exec "klayout -b -v"
    end
    opts.on("--help", "show usage") do
      puts opts
      exit 1
    end
    opts.on("--usage", "show usage") do
      puts opts
      exit 1
    end
  end.parse!(argv)   # default constant ARGV? Doesn't work here: not true ruby.
  # "!" on end of parse: argv parameter is MODIFIED by OptionParser to delete the processed options.

  if argv.length != 2
    puts "ERROR, not 2 arguments. #{usage}"
    exit 1
  end
f = argv[0]
# c = argv[1]
fout = argv[1]

# if f == "" || fout == "" || c == ""
if f == "" || fout == ""
  puts "ERROR: insufficient arguments. #{usage}"
  exit 1
end

# include RBA
begin

if o[:flat]
  flat        # flat, with or without tiling
else
  deep
end

if o[:thread] == 0
  o[:thread]=`nproc`
end

if o[:tile] > 0
  tiles(o[:tile])
  # no border
  # tile_borders(0)
  no_borders
end

threads(o[:thread])
deepP = is_deep?
tiledP = is_tiled?

# title = "Sky130Apin1.drc, input=#{f}, topcell=#{c}"
title = "gdsMergeall.drc, input=#{f}"
# puts "Running Sky130Apin1.drc on file=#{f}, topcell=#{c}, output to #{fout}"
puts "Running Sky130Apin1.drc on file=#{f}, output to #{fout}"
puts "  args: #{ENV["_M0"]}"
puts "  deep:#{deepP} tiled:#{tiledP} threads:#{o[:thread]}"

STDOUT.flush

# source(f, c)
s = source(f)
layout = s.layout
target(fout)

$errs = 0
$totals = 0
$rules = 0
layers = 0

# verbose input(), flag if its empty. description is a string.
def inputVerb(layn, typen, desc)
  ly = input(layn, typen)
  isEmpty(ly, desc)
  return ly
end

def isEmpty(layer, desc)
  if layer.is_empty?
    puts "--EMPTY : #{desc}"
  else
    puts "data    : #{desc}"
  end
end

# loop over all layer-purpose-pairs found in input-layout:
#   Merge it and write merged results to output.

STDERR.flush
layout.layer_indices.each { |layer_id|
  layers += 1
  layer_info = layout.get_info(layer_id)
  lpp = layer_info.to_s
  # puts "checking #{lpp} ..."
  input(lpp).merged.output(lpp)
}

puts "#{$errs} errors,  #{layers} layers processed."

# if we roll-over to 256, exit-status seen by shell is zero.
# uncaught I/O errors will yield (built-in) exit status of 1.
if $errs > 0
  $errs = $errs + 1
end
if $errs > 127
  $errs = 127
end

# experimental: report own peak process-stats. BUT: output-file isn't really written
# until we exit (during exit). So these results are not 100% accurate.
# VmHWM: max-resident-size, VmPeak: max virtual-size.
# don't need: pid=Process.pid
if   File.readable?("/proc/self/status")
  puts File.foreach("/proc/self/status").grep(/^(VmPeak|VmHWM)/)
end

end # end begin

# does not work (to set exit-status) in 0.23.11. Does work in 0.24.2, 0.27.
exit $errs

#
# emacs syntax-mode:
# Local Variables:
# mode:ruby
# End:
