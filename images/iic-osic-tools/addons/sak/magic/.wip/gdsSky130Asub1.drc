#!/bin/bash
# usage: gdsSky130Asub1.drc <gdsFile> <topcellName> <markerReportOutFileName>
#
# totals are reported twice: 1st for just the (subset of) MR-rules,
# and lastly again for the grand-total: including BOTH MR-rules & non-MR-rules.
# 
# Exit status (does not work in klayout 0.23.11; does in 0.24 and later):
#  1 : I/O error or other internal error (uncaught exceptions).
#  2...127 : means 1... rules did flag error(s). If over 126 rules had errors, status is 127 max.
#      That is this # is the how many rule-types had non-zero errors, NOT total errors count.
#  0 : no rules flagged errors.
#   If process dies thru signal, exit status is 128+SIGNUM, so that range is reserved.
#   i.e. if kernel oom-killer sends kill -9: status=137.
#
# Runs klayout (in batch) to do partial/crude layer grid checks; output to a MarkerDB (*.lyrdb)
# Crude because no partitioning is done, to enforce unique grid requirements by areaid.
#
# Script starts as regular ruby, then exec's via klayout passing self to it.
# (klayout requirement is this script-name *must* end in .drc).
#
# Known reasons why mult. klayout-versions produce non-identical output:
# 1. In some earlier versions (than 0.27), markerReport may state "wrong" generator:
#     <generator>:/built-in-macros/drc.lym</generator>
# the "better" generator would look like:
#     <generator>drc: script='<yourPath>/gdsSky130Asub1.drc'</generator>
# 2. When errors are flagged, the ordering of errors may differ between klayout versions.
#
# Shebang for: no outer ruby interpreter; generalize arg passing to script.
# for-bash: re-quote args, to import from an env-var
x=%{
  [[ "$1" == "--version" || "$1" == "-v" ]] && exec klayout -b -v    # pass-thru -v

  export _M0=
  for i in "$@" ; do _M0="$_M0${_M0:+,}\"${i//\"/\\\"}\""; done
  exec klayout -b -r "$0"
}
# for-ruby:

argv=eval("[ #{ENV["_M0"]} ]")   # re-parse args from env-var
# puts "argv.size=#{argv.size}"
# argv.each{ |v| puts v }

  thisScript = $0
  prog="gdsSky130Asub1.drc"
  usage = "Usage: #{prog} [options]  <gdsFile> <topcellName> <markerReportOutFileName>"
  require 'optparse'

  argSum = argv.join(' ')
  if argv.empty?
    argv << '--help'
  end

  o = {:flat=>false, :thread=>4}
  OptionParser.new do |opts|
    opts.banner = usage
    opts.on("-f", "flat mode, default is deep") do
      o[:flat] = true
    end
    opts.on("-t THREADS", "threads for deep (not flat) mode, default 4. Give 0 to get from cmd: nproc") do |thr|
      o[:thread] = thr.to_i
    end

    opts.on("-v", "--version", "version: pass-thru, JUST show klayout version") do
      exec "klayout -b -v"
    end
    opts.on("--help", "show usage") do
      puts opts
      exit 1
    end
    opts.on("--usage", "show usage") do
      puts opts
      exit 1
    end
  end.parse!(argv)   # default constant ARGV? Doesn't work here: not true ruby.
  # "!" on end of parse: argv parameter is MODIFIED by OptionParser to delete the processed options.

  if argv.length != 3
    puts "ERROR, not 3 arguments. #{usage}"
    puts "         To list available top-cells: gdsTopcells <gdsFile>"
    exit 1
  end
f = argv[0]
c = argv[1]
fout = argv[2]

if f == "" || fout == "" || c == ""
  puts "ERROR: insufficient arguments. #{usage}"
  puts "         To list available top-cells: gdsTopcells <gdsFile>"
  exit 1
end

# include RBA
begin

if o[:flat]
  flat
else
  deep
end

if o[:thread] == 0
  o[:thread]=`nproc`
end

threads(o[:thread])
deepP = is_deep?
tiledP = is_tiled?

title = "Sky130Asub1.drc, input=#{f}, topcell=#{c}"
puts "Running Sky130Asub1.drc on file=#{f}, topcell=#{c}, output to #{fout}"
puts "  deep:#{deepP} tiled:#{tiledP} threads:#{o[:thread]}"
STDOUT.flush

source(f, c)
report(title, fout)

# $ruleHeader = "Checks with errors:"
$ruleHeader = "--- #err|description, table for cell: %s" % [c]
$errs = 0
$totals = 0
$rules = 0
$errs_mr = 0
$totals_mr = 0
$rules_mr = 0

#
# Direct rule checks like:
#     m2.width(1.5).output("m2 width < 1.5")
# write to report() but don't give opportunity to count/print which rules did flag.
# Instead:
#     rule(m2.width(1.5), "m2 width < 1.5")
#
# Wish to use direct-form, and just tabulate/post-process report after the fact.
# This form (empty or not) still does not nicely report/summarize error-count per-rule.

# Return value not meaningful if the is_empty? fails (in 0.26.9 or earlier).
#
def rule_mr(marker, msg)
  rule_work(true, marker, msg)
end
def rule(marker, msg)
  rule_work(false, marker, msg)
end
def rule_work(isMR, marker, msg)
  $rules += 1
  if isMR
    $rules_mr += 1
  end
  empty = false
  size = -1
  emptyFails = false

  # test if marker is empty.
  #   marker.is_empty? : works in 0.27, not 0.26 and earlier.
  #   marker.size : does not work in any so far.
  # marker.bbox appears universal, works in klayout versions 0.23.11 ... 0.27.
  # In case it fails, catch exception and revert to less information in our stdout.
  begin
    size = marker.data.size
    empty = (size == 0)
    # works all versions: size = marker.data.size
    # works all versions: empty = marker.bbox.to_s == "()"
    # fails pre 0.27: empty = marker.is_empty?
  rescue StandardError => e
    # when can't determine which rules flagged errors, signal not to summarize.
    emptyFails = true
    empty = false
    size = -1
    if $errs >= 0
      $errs = -8
    end
    if ($errs & 1) == 0
      puts "turned off marker empty detect..."
    end
    $errs = $errs | 1
  end
  if ! empty
    marker.output(msg)
    if ! emptyFails
      if $errs == 0
        puts $ruleHeader
      end
      $errs   += 1
      $totals += size
      if isMR
        $errs_mr   += 1
        $totals_mr += size
      end
        
      puts "%8d %s" % [size, msg]
      return 1
    end
  end
  return 0
end

# verbose input(), flag if its empty. description is a string.
def inputVerb(layn, typen, desc)
  ly = input(layn, typen)
  isEmpty(ly, desc)
  return ly
end

def isEmpty(layer, desc)
  if layer.is_empty?
    puts "--EMPTY : #{desc}"
  else
    puts "data    : #{desc}"
  end
end

# 1a
# g1 = 0.001
# were 1a: 0.001, but that's not so per error reports back from skywater
# p1 = input(66, 20)
# m1 = input(68, 20)
#  v1 = input(68, 44)
# m2 = inputVerb(69, 20, "m2 - 69/20")

# 1b
g5 = 0.005
#  v2 = input(69, 44)
# m3 = input(70, 20)
#  v3 = input(70, 44)
# m4 = input(71, 20)
#  v4 = input(71, 44)
# m5 = input(72, 20)

# were 1a: 0.001, but that's not so per error reports back from skywater
# p1.ongrid(g5).output("p1-grid5", "poly off-grid #{g5}")
# m1.ongrid(g5).output("m1-grid5", "met1 off-grid #{g5}")
#  v1.ongrid(g5).output("v1-grid5", "via1 off-grid #{g5}")
# m2.ongrid(g5).output("m2-grid5", "met2 off-grid #{g5}")

#  v2.ongrid(g5).output("v2-grid5", "via2 off-grid #{g5}")
# m3.ongrid(g5).output("m3-grid5", "met3 off-grid #{g5}")
#  v3.ongrid(g5).output("v3-grid5", "via3 off-grid #{g5}")
# m4.ongrid(g5).output("m4-grid5", "met4 off-grid #{g5}")
#  v4.ongrid(g5).output("v4-grid5", "via4 off-grid #{g5}")
# m5.ongrid(g5).output("m5-grid5", "met5 off-grid #{g5}")

# dnwell = input(	64, 18)
# pwres = input(	64, 13)
# nwell = input( 	64, 20)
# diff = input( 	65, 20)
# tap = input( 	65, 44)
psdm = input(	94, 20)
isEmpty(psdm, "psdm - 94/20")
cpsdm = input(	32, 0)   # MASK
isEmpty(cpsdm, "cpsdm - 32/0 [NOT CHECKED]")
nsdm = input(	93, 44)
isEmpty(nsdm, "nsdm - 93/20")
cnsdm = input(	30, 0)   # MASK
isEmpty(cnsdm, "cnsdm - 30/0 [NOT CHECKED]")
# lvtn = input( 125, 44)
hvtp = input( 78, 44)
isEmpty(hvtp, "hvtp - 78/44")
chvtp = input( 97, 0)    # MASK
isEmpty(chvtp, "chvtp - 97/0 [NOT CHECKED]")
# sonos = input( 80, 20)
# coreid = input( 81, 2)
# stdcel = input( 81, 4)
# npnid = input(	82, 20)
# rpm = input( 86, 20)
# urpm = input( 79, 20)
# ldntm = input( 11, 44)
# hvntm = input( 125, 20)
thkox = input( 	75, 20)      # hvi
isEmpty(thkox, "thkox(hvi) - 75/20")
# licon = input(	66, 44)
npc = inputVerb(  95, 20, "npc - 95/20")
cnpc = inputVerb( 49,  0, "cnpc.mask - 49/0 [NOT CHECKED]")

# li = input( 67, 20)
# mcon = input( 	67, 44)
# rdl = input(   74, 20)
# glass = input( 	76, 20)
# bound = input( 235, 4)
# capm = input( 	89, 44)
# capm2 = input( 	97, 44)
# lowtapd = input(	81, 14)
# fillobsm1 = input( 	62, 24)
# fillobsm2 = input( 	105, 52)
# fillobsm3 = input( 	107, 24)
# fillobsm4 = input( 	112, 4)

# dnwell.ongrid(g5).output("dnwell-grid5","dnwell off-grid #{g5}")
# pwres.ongrid(g5).output("pwres-grid5","pwres off-grid #{g5}")
# nwell.ongrid(g5).output("nwell-grid5","nwell off-grid #{g5}")
# diff.ongrid(g5).output("diff-grid5","diff off-grid #{g5}")
# tap.ongrid(g5).output("tap-grid5","tap off-grid #{g5}")
# psdm.ongrid(g5).output("psdm-grid5","psdm off-grid #{g5}")
# nsdm.ongrid(g5).output("nsdm-grid5","nsdm off-grid #{g5}")
# lvtn.ongrid(g5).output("lvtn-grid5","lvtn off-grid #{g5}")
# hvtp.ongrid(g5).output("hvtp-grid5","hvtp off-grid #{g5}")
# sonos.ongrid(g5).output("sonos-grid5","sonos off-grid #{g5}")
# coreid.ongrid(g5).output("coreid-grid5","coreid off-grid #{g5}")
# stdcel.ongrid(g5).output("stdcel-grid5","stdcel off-grid #{g5}")
# npnid.ongrid(g5).output("npnid-grid5","npnid off-grid #{g5}")
# rpm.ongrid(g5).output("rpm-grid5","rpm off-grid #{g5}")
# urpm.ongrid(g5).output("urpm-grid5","urpm off-grid #{g5}")
# ldntm.ongrid(g5).output("ldntm-grid5","ldntm off-grid #{g5}")
# hvntm.ongrid(g5).output("hvntm-grid5","hvntm off-grid #{g5}")
# thkox.ongrid(g5).output("thkox-grid5","thkox off-grid #{g5}")
# licon.ongrid(g5).output("licon-grid5","licon off-grid #{g5}")
# npc.ongrid(g5).output("npc-grid5","npc off-grid #{g5}")
# li.ongrid(g5).output("li-grid5","li off-grid #{g5}")
# mcon.ongrid(g5).output("mcon-grid5","mcon off-grid #{g5}")
# rdl.ongrid(g5).output("rdl-grid5","rdl off-grid #{g5}")
# glass.ongrid(g5).output("glass-grid5","glass off-grid #{g5}")
# bound.ongrid(g5).output("bound-grid5","bound off-grid #{g5}")
# capm.ongrid(g5).output("capm-grid5","capm off-grid #{g5}")
# capm2.ongrid(g5).output("capm2-grid5","capm2 off-grid #{g5}")
# lowtapd.ongrid(g5).output("lowtapd-grid5","lowtapd off-grid #{g5}")
# fillobsm1.ongrid(g5).output("fillobsm1-grid5","fillobsm1 off-grid #{g5}")
# fillobsm2.ongrid(g5).output("fillobsm2-grid5","fillobsm2 off-grid #{g5}")
# fillobsm3.ongrid(g5).output("fillobsm3-grid5","fillobsm3 off-grid #{g5}")
# fillobsm4.ongrid(g5).output("fillobsm4-grid5","fillobsm4 off-grid #{g5}")

# (HVI) THKOX*: should be thkox (hvi) in periphery
# thkox.space(0.7).output("THKOX*(hvi) space < 0.7")
# thkox.notch(0.7).output("THKOX*(hvi) notch < 0.7")
# thkox.width(0.6).output("THKOX*(hvi) width < 0.6")
rule_mr(thkox.space(0.7), "mr:THKOX*(hvi) space < 0.7")
# rule_mr(thkox.notch(0.7), "THKOX*(hvi) notch < 0.7")
rule_mr(thkox.width(0.6), "mr:THKOX*(hvi) width < 0.6")

# NPC:
rule_mr(npc.space(0.27), "mr:NPC space < 0.27")
# rule_mr(npc.notch(0.27), "NPC notch < 0.27")
rule_mr(npc.width(0.27), "mr:NPC width < 0.27")

# NSDM:
# nsdm.space(0.38).output("NSDM.2 space < 0.38")
# nsdm.notch(0.38).output("NSDM.2 notch < 0.38")
# nsdm.width(0.38).output("NSDM.1 width < 0.38")
rule(nsdm.space(0.38), "NSDM.2 space < 0.38")
# rule(nsdm.notch(0.38), "NSDM.2 notch < 0.38")
rule(nsdm.width(0.38), "NSDM.1 width < 0.38")

# PSDM:
# psdm.space(0.38).output("PSDM.2 space < 0.38")
# psdm.notch(0.38).output("PSDM.2 notch < 0.38")
# psdm.width(0.38).output("PSDM.1 width < 0.38")
rule(psdm.space(0.38), "PSDM.2 space < 0.38")
# rule(psdm.notch(0.38), "PSDM.2 notch < 0.38")
rule(psdm.width(0.38), "PSDM.1 width < 0.38")

# DNWELL*: should be dnwell-not-... (Photo, UHVI)
# dnwell.space(6.3).output("DNWELL* space < 6.3")
# dnwell.notch(6.3).output("DNWELL* notch < 6.3")
# dnwell.width(3.0).output("DNWELL width < 3.0")
# dnwell.separation(nwell, 4.5).output("DNWELL to NWELL space < 4.5")

# nwell.space(1.27).output("NWELL space < 1.27")
# nwell.notch(1.27).output("NWELL notch < 1.27")
# nwell.width(0.84).output("NWELL width < 0.84")

# hvtp.space(0.38).output("HVTP.2 space < 0.38")
# hvtp.notch(0.38).output("HVTP.2 notch < 0.38")
# hvtp.width(0.38).output("HVTP.1 width < 0.38")
rule_mr(hvtp.space(0.38), "mr:HVTP.2 space < 0.38")
# rule_mr(hvtp.notch(0.38), "HVTP.2 notch < 0.38")
rule_mr(hvtp.width(0.38), "mr:HVTP.1 width < 0.38")

# hvntm.space(0.7).output("HVNTM.2 space < 0.7")
# hvntm.notch(0.7).output("HVNTM.2 notch < 0.7")
# hvntm.width(0.7).output("HVNTM.1 width < 0.7")

# report(myTitle, markerOut)
# m2 = inputVerb(69, 20, "m2 - 69/20")
# rule(m2.width(2.5), "m2 width < 2.5 (fake: provoke errors)")
# How to get error-count (as-if-flat at top-cell) from this statement?:
#    m2.width(2.5).output("m2 width < 2.5")

end
# How to tabulate as-if-flat "error-counts by error-message" from current report()?
# In old versions, we can't seem to determine here if a check flagged errors ($errs == -1).
if $errs >= 0
  puts "%8d total-MR error(s) among %d error type(s), %d checks, cell: %s (subset)" % [$totals_mr, $errs_mr, $rules_mr, c]
  puts "%8d total error(s) among %d error type(s), %d checks, cell: %s" % [$totals, $errs, $rules, c]
  # puts "#{$errs} of #{$rules} checks have errors"
else
  puts "#{$rules} checks"
  $errs = 0    # so exit status == 0.
end
puts "Writing report..."

# if we roll-over to 256, exit-status seen by shell is zero.
# uncaught I/O errors will yield (built-in) exit status of 1.
if $errs > 0
  $errs = $errs + 1
end
if $errs > 127
  $errs = 127
end

# does not work (to set exit-status) in 0.23.11.
# Does work in 0.24.2, 0.27!
exit $errs

# For 0.23.11 we could set exit-status as below, but:
# if we do: the report() does not get written!
# 
# for exit! we'd lose buffered output unless we flush:
# STDOUT.flush
# STDERR.flush
#
# Kernel.exit!($errs)
# emacs syntax-mode:
# Local Variables:
# mode:ruby
# End:
