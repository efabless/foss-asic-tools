#!/usr/bin/ruby
# usage: gdsAreamin.rb <gdsFile> <minAreaSqMicrons> <markerReportOutFileName>
#
# Runs klayout (in batch) to flag shapes have area zero or less-than given-area.
#   If you give zero: flags shapes with area EQUAL-TO zero.
#   Else:             flags shapes with area LESS-THAN (and NOT equal-to) the given area.
# Operates on RAW shapes (not merged) and all layers, all cells. See CAVEATS below.
#
# Script starts as regular ruby, then exec's via klayout passing self to it.
# (klayout requirement is this script-name *must* end in .rb).
# based on ://www.klayout.de/staging/forum/discussion/1066/extract-layer-list-and-top-cell-name-from-gds-file
#
# TODO: Take klayout .lyt tech-file as optional arg, and use to apply nice symbolic names to
# the output layers (instead of just "125/44" style numeric layernum/datatype).
#
# CAVEATS: Also intent was: flag zero-area shapes that commerical tools would die on since they
# are degenerate polygons. But so far this DOES NOT WORK: Suspect klayout absorbs/discards
# degenerate (or all zero area) polygons on read-in; and will never flag zero-area shapes.
# For that original purpose a non-PDK-specific script was sufficient: process all layers
# indiscriminately, and give an area=0 or very close to zero.
# For other uses a more general script should support any combo of either/both upper/lower
# area bounds, and to limit to specific layers or layer-intersections, and to disable RAW
# mode (i.e. operate on fully merged polygons: which is slower but usually desireable).
#
InKlayout=$InKlayout
if InKlayout.to_s.empty?
  thisScript = $0
  f = ARGV[0]
  a = ARGV[1]
  fout = ARGV[2]

  if f == "--version" || f == "-v"
    # these options don't prevent klayout from initializing ~/.klayout unfortunately...
    exec "klayout -nc -rx -zz -v"
  end

  if ARGV.length != 3
    puts "ERROR, must give one argument, usage: gdsAreamin.rb <gdsFile> <minAreaSqMicrons> <markerReportOutFileName>"
    puts "If minAreaSqMicrons is 0, will flag RAW shapes with area == 0."
    puts "If minAreaSqMicrons is not 0, will flag RAW shapes with area < minAreaSqMicrons."
    puts "Exit-status: 0 on success; 1 on I/O or usage error. See also gdsAllcells.rb"
    exit 1
  end


  # construct command from our script arguments, replace self with klayout...
  exec "klayout -nc -zz -rx -rd InKlayout=1 -rd file=#{f} -rd fileOut=#{fout} -rd area=#{a} -r #{thisScript}"
end

#
# to just read a gds in batch (no useful info printed):
#   klayout -d 40 -z xyz.gds >& klayout.read.log
#
#   -d : debug level, no details during GDS-reading however, try 20 or 40 or (timing too:) 21 or 41
#   -z/-zz : -z pseudo-batch mode, still needs X-DISPLAY connection; -zz true batch
#   -nc : don't use/update configuration file
#   -rx : disable built-in macros, stuff not needed for batch usually
#   -rd : define variables the script can reference
#

f = $file
a = $area
fout = $fileOut

if f == "" || a == "" || fout == ""
  STDERR.puts "ERROR: missing gdsFile argument, usage: gdsAreamin.rb <gdsFile> <minAreaSqMicrons> <markerReportOutFileName>"
  exit 1
end

a_invalid = !Float(a) rescue true
if a_invalid
  STDERR.puts "ERROR: failed to parse min-area '#{a}' as a float."
  exit 1
end

af = Float(a)  
afs = af.to_s
# puts "got f='#{f}', a='#{a}' af.to_s='#{afs}'"

if af < 0.0
  STDERR.puts "ERROR: min-area '#{afs}' cannot be negative."
  exit 1
end

if af == 0.0
  why = "area == #{afs}"
  whyt = "area == #{a}"
else
  why = "area < #{afs}"
  whyt = "area < #{a}"
end

# include RBA
 
begin
  STDERR.puts "Reading file #{f}, to check shapes for #{whyt}, output to #{fout}"
  # layout = Layout.new
  # layout.read(f)
  # dbu = layout.dbu
  # STDERR.puts "dbu=#{dbu}"
  s = source(f)
  layout = s.layout  

  title = "gdsAreamin.rb, input=#{f}, #{whyt}"
  report(title, fout)

  threads(4)
  deep

  errs = 0
  layers = 0
  total = 0
  ruleHeader = "--- #err|description"
  
  STDERR.flush
  layout.layer_indices.each do |layer_id|
    layers = layers + 1
    layer_info = layout.get_info(layer_id)
    lpp = layer_info.to_s
    # puts "checking #{lpp} ..."
    layer = input(lpp).raw
    if af == 0.0
      mark = layer.with_area(af).raw   # area == af
    else
      mark = layer.with_area(nil, af).raw   # area < af
    end
    mark.output("#{lpp} #{why}")
    size = mark.data.size
    if size > 0
      puts ruleHeader if errs == 0
      errs = errs + 1
      total = total + size
      puts "%8d %s %s" % [size, lpp, why]
    else
    end
  end

end

STDERR.puts "%8d total, among %d layers flagged, of %d source layers" % [total, errs, layers]

# reserve status=1 for I/O errors
if errs > 0
  errs = errs + 1
end
# don't roll-over exit-status to/past zero
if errs > 255
  errs = 255
end

# exit doesn't work to set status; exit! requires explicit buffered-IO flush.
STDOUT.flush
STDERR.flush
exit errs
# Kernel.exit! errs
