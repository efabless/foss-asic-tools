# A general XOR script
# (https://www.klayout.de/forum/discussion/100/xor-vs-diff-tool)
# This script uses KLayout's DRC language to implement a generic
# XOR between two layouts. The name of the layouts is given
# in $a and $b.

# For layout-to-layout XOR with multiple cores, run this script with
#   ./klayout -r xor.drc -rd thr=NUM_CORES -rd top_cell=TOP_CELL_NAME -rd a=a.gds -rd b=b.gds -rd ol=xor.gds -zz
# (replace NUM_CORES by the desired number of cores to utilize

# enable timing output
verbose

# set up input a
a = source($a, $top_cell)
$lay_a = a.layout
#$lay_a.flatten($lay_a.top_cell().cell_index, 1, false)

# set up input b
b = source($b, $top_cell)
$lay_b = b.layout
#$lay_b.flatten($lay_b.top_cell().cell_index, 1, false)

outputs = Array.new

$tp = RBA::TilingProcessor::new
$tp.tile_size(500, 500)
$tp.threads = $thr.to_i
$tp.dbu = $lay_a.dbu

$count = 0

o = RBA::Layout::new
cell = o.create_cell($top_cell.to_s)
cell_ind = cell.cell_index()

def xor(output, layer_i) 

  $tp.output("output_#{$count}", output[$count][:data].data)
  $tp.input("a1", $lay_a, $lay_a.top_cell().cell_index, layer_i )
  $tp.input("a2", $lay_b, $lay_b.top_cell().cell_index, layer_i )
  $tp.queue("_output(output_#{$count}, a1 ^ a2)")
  $count = $count + 1

end

# collect all common layers
layers = {}
[ a.layout, b.layout ].each do |ly|
  ly.layer_indices.each do |li|
    i = ly.get_info(li)
    out = polygon_layer
    xor(outputs.push({"layer": i, "data": out}), i)
  end
end


$tp.execute("XOR")

puts "Writing gds output file"

outputs.each do |outs|
  cell.shapes(o.layer(outs[:layer])).insert(outs[:data].data)
end
o.write($output)