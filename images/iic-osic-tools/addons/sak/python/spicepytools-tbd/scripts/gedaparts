#!/usr/bin/python
# vim: ts=4 : et : sw=4 :

import sys, os, re, string
import ConfigParser
import getopt


#################### SETUP VARS
BASE_DIR = os.path.join(os.path.dirname(__file__), '../')
PARTDB_DIR = os.path.join(BASE_DIR,'indexfiles/')
SYMBOLTEMPLATE_DIR = os.path.join(BASE_DIR,'symbol_templates/')
SYMBOLDUMP_DIR = os.path.join(BASE_DIR, 'symbols/')

#################### FUNCTIONS
def list_parts(filename):
    ind = ConfigParser.ConfigParser()
    ind.read(filename)
    parts = []
    for part in ind.sections():
        if not ind.has_option(part, 'model_status_undefined'):
            parts.append(part)
    return parts

def symbol(filename, partname):
    ind = ConfigParser.ConfigParser()
    ind.read(filename)

    if verbose:
        print "trying to get " + partname + " from " + PARTDB_DIR + filename   

    symbol = ind.get(partname, "symbol")
    symbol_template = string.Template(open(SYMBOLTEMPLATE_DIR + symbol).read())

    repl = dict(ind.items(partname))
    modeldir = ind.get("GLOBAL","MODELDIR")
    repl["file"] = os.path.abspath(BASE_DIR + modeldir + repl["file"])
    return symbol_template.safe_substitute(repl)

def dumplibrary(directory, library):
    libdir = os.path.join(directory,library)
    if not os.path.exists(libdir):
        os.mkdir(libdir)

    ind = ConfigParser.ConfigParser()
    ind.read(os.path.join(PARTDB_DIR,library))
    for part in ind.sections():
        if not ind.has_option(part, 'model_status_undefined'):
            symbol = ind.get(part, "symbol")
            symbol_template = string.Template(open(SYMBOLTEMPLATE_DIR + symbol).read())
            repl = dict(ind.items(part))
            modeldir = ind.get("GLOBAL","MODELDIR")
            repl["file"] = os.path.join(BASE_DIR, modeldir, repl["file"])

            sym = symbol_template.safe_substitute(repl)
            filename = os.path.join(libdir, part + ".sym")
            open(filename,"wt").write(sym)

def log(x):
    open("gedaparts.log","at").write(str(x) + "\n")

def usage():
    sys.stderr.write("usage: " +  sys.argv[0] + """ [options], ...
  -h --help: print help information
  -v --verbose: print debug messages to stderr
  -s --symbols library [library, ...]: dump symbol files to a directory
  -d --symboldir dirname: set destination dir for the symbols
  -l --list library: list symbol of one library file
  -p --part library part: get a single part of a library
  """)


#################### MAIN

try:
    opts, args = getopt.getopt(sys.argv[1:], "hvsd:l:p:", ["help", "verbose","symbols", "symboldir=", "list=", "part="])
except getopt.GetoptError, err:
    # print help information and exit:
    print str(err) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

verbose = False
dumpsymbols = False
symboldir = SYMBOLDUMP_DIR
listlibrary = False
printpart = False

for o, a in opts:
    if o in ("-h", "--help"):
        usage()
        sys.exit()
    elif o in ("-v", "--verbose"):
        verbose = True
    elif o in ("-s", "--symbols"):
        dumpsymbols = True
    elif o in ("-d", "--symboldir"):
        symboldir = a
    elif o in ("-l", "--list"):
        listlibrary = True
        libraryfile = a
    elif o in ("-p", "--part"):
        printpart = True
        libraryfile = a
        if len(args) != 1:
            sys.stderr.write('ERROR: No partname given\n')
            usage()
            sys.exit(2)
        symbolfile = args[0]
    else:
        assert False, "unhandled option"

if verbose:
    log(sys.argv[0] + ": opts:" + str(opts) + " args: " + str(args))

if dumpsymbols:
    if os.path.exists(os.path.abspath(symboldir)):
        if not os.path.isdir(symboldir):
            sys.stderr.write(sys.argv[0] + ": symboldir is not a directory")
            sys.exit(2)
    else:
        os.mkdir(symboldir)
    for lib in args:
        dumplibrary(symboldir, os.path.basename(lib))
    sys.exit()
    
elif listlibrary:
    librarypath = os.path.join(PARTDB_DIR, libraryfile)
    if os.path.exists(librarypath):
        sys.stdout.write("\n".join(list_parts(librarypath)))
    else:
        sys.stderr.write('ERROR: Symbol library not found\n')
    sys.exit()

elif printpart:
    if verbose:
        print "printing part from " + libraryfile
    librarypath = os.path.join(PARTDB_DIR, libraryfile)
    if os.path.exists(librarypath):
        sys.stdout.write(symbol(librarypath, symbolfile))
    else:
        sys.stderr.write('ERROR: Symbol library not found\n')
    sys.exit()
    
else:
    sys.stderr.write(sys.argv[0] + ": undefined case\n")
    usage()
    sys.exit(2)
